#!/bin/sh

set -eox

GH_ACCOUNT=jwfh
GH_INIT_REPO=freebsd-init
GH_PORT_REPO=freebsd-ports

PORTSDIR=$(awk -F'=' 'BEGIN { PORTSDIR="" } !/^#/ && /PORTSDIR=/ { PORTSDIR=$2 } END { if (PORTSDIR == "") { exit 1 } else { print PORTSDIR } }' /etc/portsnap.conf) || PORTSDIR=/usr/ports
WRKDIR="$(mktemp -d)"

RETRIES=3

# Order matters here because unlike when building with poudriere,
# the ports tree's Makefiles sometimes get dependencies a little
# confused. Most issues stem from a port requiring Python 2.7 but 
# one of its dependencies requiring ^3.6. The fix is to install the
# dependency first.
PORTS='	
	devel/gmake 
	devel/llvm80 
	devel/meson
	devel/p5-subversion 
	devel/git 
	security/sudo 
	print/ghostscript9-agpl-base 
	print/tex-dvipsk
	editors/vim
	x11/libinput
	x11-toolkits/qt5-gui
	emulators/virtualbox-ose
	www/chromium
'

CONFLICTS='
	devel/gmake=ports-mgmt/pkg
	x11-toolkits/qt5-gui=devel/evdev-proto
'

# Order does not matter here. Ports listed here should be a subset of
# those listed in ${PORTS}. Ports listed here will have  
# `DISABLE_VULNERABILITIES=yes' passed to make(1).
DISABLE_VULNERABILITIES='
	print/ghostscript9-agpl-base 
	www/chromium
'

SKIP_INSTALL='
	README
	LICENSE
	install
	users\.conf
	var/db/ports/.*
	boot/loader\.conf
	usr/local/etc/X11/xorg\.conf\.d/driver-nvidia\.conf
'

bootstrap_portsnap() {
	echo "Fetching portsnap"
	portsnap fetch --interactive
	portsnap extract
}

fetch_repo() {
	echo "Fetching files from VCS to ${WRKDIR}"
	cd "${WRKDIR}" && \
		fetch --no-verify-peer -o- https://api.github.com/repos/${GH_ACCOUNT}/${GH_INIT_REPO}/releases/latest \
			| sed -E -e 's@^.*"tarball_url":"@@' -e 's@".*$@@' \
			| xargs fetch --no-verify-peer -o- \
			| tar xvf - --strip 1
}

install_port_options() {
	echo "Installing port options"
	cp -R ${WRKDIR}/var/db/ports /var/db/
}

install_if_not_exists() {
	echo "Building $1"
	PORT=$1
	for CONFLICT in "${CONFLICTS}"
	do
		for CONFLICT_PORT in $(echo "${CONFLICT}" | awk -vFS=",|\=" -vOFS=" " "/^[:space:]*$(echo "${PORT}" | sed -e 's#/#\\/#g')/ { \$1=\"\"; print }")
		do
			if ! pkg info "${CONFLICT_PORT}" >/dev/null 2>&1; then
				make -C "${PORTSDIR}/${CONFLICT_PORT}" deinstall || :
			fi
		done
	done

	for try in $(seq ${RETRIES})
	do 
		if ! pkg info "${PORT}" >/dev/null 2>&1; then
			if echo "${DISABLE_VULNERABILITIES}" | grep -q -E -e "[:space:]+${PORT}[:space:]+"; then
				make -C "${PORTSDIR}/${PORT}" DISABLE_VULNERABILITIES=yes install clean || :
			else
				make -C "${PORTSDIR}/${PORT}" install clean || :
			fi
			if pkg info "${PORT}" >/dev/null 2>&1; then
				break
			fi
		else 
			echo "${PORT} is already installed"
		fi
	done
	pkg info "${PORT}" >/dev/null 2>&1
}

install_ports() {
	for PORT in "${PORTS}"
	do
		install_if_not_exists "${PORT}"
	done
}

nvidia_support() {
	if pciconf -lv | grep -q -i -e 'nvidia'; then
		install -m 644 usr/local/etc/X11/xorg.conf.d/driver-nvidia.conf /usr/local/etc/X11/xorg.conf.d/driver-nvidia.conf
		sysrc kld_list="nvidia-modeset"
		if [ -e /boot/loader.conf ]; then
			echo 'nvidia_load="YES"' >> /boot/loader.conf
		fi
	fi
}

zfs_support() {
	if zpool list | grep -v -q -e 'no pools available'; then
		if mount -p 2>/dev/null | awk '{ if ($2 == "/" && $3 == "zfs" && $0 !~ /iocage/) { exit } else { exit 1 } }'; then 
			sysrc zfs_enable="YES"
			if [ -e /boot/loader.conf ]; then
				echo 'zfs_load="YES"' >> /boot/loader.conf
			fi
		fi
	fi
}

install_boot_loader_conf() {
	if df / | tail -n+2 | awk '{ if ($0 !~ /iocage/) { exit } else { exit 1 } }'; then
		install -m 644 boot/loader.conf /boot/loader.conf
	fi
}

install_config_files() {
	for conf_file in $(find -E . -type f \( \! \( -regex '\./\.git\/.*' -o -regex "./$(echo "${SKIP_INSTALL}" | awk 'BEGIN { first=1 } /^[^[:space:]]+$/ { if (first==1) { printf "(%s", $0; first=0 } else { printf "|%s", $0 } } END { printf ")" }')" \) \) -exec [ -e "{}" ] \; -print | sed -e 's#\./##')
	do
		install -m 644 "${conf_file}" "/${conf_file}"
	done
}

main() {
	bootstrap_portsnap
	fetch_repo
	install_port_options
	install_ports
	install_boot_loader_conf
	nvidia_support
	zfs_support
}

main

rm -rf "${WRKDIR}"
